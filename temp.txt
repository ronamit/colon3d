

def find_pose_change(
    start_pose: torch.Tensor,
    final_pose: torch.Tensor,
) -> torch.Tensor:
    """Finds the pose change that transforms start_pose to final_pose. (both are given in the same coordinate system).
    Args:
        start_pose: [n_points x 7] each row is (x, y, z, q0, qx, qy, qz) where (x, y, z) is the translation [mm] and (q0, qx, qy, qz) is the unit-quaternion of the rotation.
        final_pose: [n_points x 7] each row is (x, y, z, q0, qx, qy, qz) where (x, y, z) is the translation [mm] and (q0, qx, qy, qz) is the unit-quaternion of the rotation.
    Returns:
        pose_change: [n_points x 7] each row is (x, y, z, q0, qx, qy, qz) where (x, y, z) is the translation [mm] and (q0, qx, qy, qz) is the unit-quaternion of the rotation.
    """
    if start_pose.ndim == 1:
        start_pose = start_pose.unsqueeze(dim=0)
    if final_pose.ndim == 1:
        final_pose = final_pose.unsqueeze(dim=0)
    assert_2d_tensor(start_pose, 7)
    assert_2d_tensor(final_pose, 7)
    start_loc = start_pose[:, 0:3]  # [n_points x 3]
    start_rot = start_pose[:, 3:7]  # [n_points x 4]
    final_loc = final_pose[:, 0:3]  # [n_points x 3]
    final_rot = final_pose[:, 3:7]  # [n_points x 4]
    # find the change in location and rotation
    change_loc = final_loc - start_loc
    rot_change = find_rotation_change(start_rot=start_rot, final_rot=final_rot)
    pose_change = torch.cat((change_loc, rot_change), dim=1)
    return pose_change



def apply_pose_change(
    start_pose: torch.Tensor,
    pose_change: torch.Tensor,
) -> torch.Tensor:
    """Applies a pose change to a given pose. (both are given in the same coordinate system)
    Args:
        start_pose: [n x 7] each row is (x, y, z, q0, qx, qy, qz) where (x, y, z) is the translation [mm] and (q0, qx, qy , qz) is the unit-quaternion of the rotation.
        pose_change: [n x 7] each row is (x, y, z, q0, qx, qy, qz) where (x, y, z) is the translation [mm] and (q0, qx, qy , qz) is the unit-quaternion of the rotation.
    Returns:
        final_pose: [n x 7] each row is (x, y, z, q0, qx, qy, qz) where (x, y, z) is the translation [mm] and (q0, qx, qy , qz) is the unit-quaternion of the rotation.
    """
    if start_pose.ndim == 1:
        start_pose = start_pose.unsqueeze(0)
    if pose_change.ndim == 1:
        pose_change = pose_change.unsqueeze(0)
    assert start_pose.ndim == 2, f"Start pose is not 2D, {start_pose.ndim}."
    assert start_pose.shape[1] == 7, f"Start pose is not in 7D, {start_pose.shape}."
    start_loc = start_pose[:, 0:3]  # [n x 3]
    start_rot = start_pose[:, 3:7]  # [n x 4]
    change_loc = pose_change[:, 0:3]  # [n x 3]
    rot_change = pose_change[:, 3:7]  # [n x 4]
    final_loc = start_loc + change_loc
    final_rot = apply_rotation_change(start_rot=start_rot, rot_change=rot_change)
    final_pose = torch.cat((final_loc, final_rot), dim=1)
    return final_pose