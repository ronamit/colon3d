import argparse
from pathlib import Path

from colon3d.sim_import.create_target_cases import TargetCasesCreator
from colon3d.sim_import.import_dataset import SimImporter
from colon3d.util.general_util import ArgsHelpFormatter, Tee, bool_arg

# -------------------------------------------------------------------------------------


def main():
    parser = argparse.ArgumentParser(formatter_class=ArgsHelpFormatter)
    parser.add_argument(
        "--load_path",
        type=str,
        default="data_gcp/raw_datasets/ColonNav",
        help="Path to load raw dataset (generated by the Unity simulator)",
    )
    parser.add_argument(
        "--save_path",
        type=str,
        help="The path to save the prepared dataset",
        default="data_gcp/datasets/ColonNav",
    )
    parser.add_argument(
        "--save_overwrite",
        type=bool_arg,
        default=True,
        help="If True then scenes folders will be overwritten if they already exists",
    )
    parser.add_argument(
        "--debug_mode",
        type=bool_arg,
        help="If true, only one scene will be processed",
        default=False,
    )
    parser.add_argument(
        "--easy_cases_mode",
        type=bool_arg,
        help="If true, we generate easy cases where the target is always visible",
        default=False,
    )
    args = parser.parse_args()
    save_overwrite = args.save_overwrite
    debug_mode = args.debug_mode

    # --------------------------------------------------------------------------------------------------------------------

    limit_n_scenes = 0  # no limit
    limit_n_frames = 0  #  no limit
    n_cases_per_scene = 5  # num cases to generate from each scene

    if debug_mode:
        limit_n_scenes = 1  # num scenes to import
        limit_n_frames = 100  # num frames to import from each scene (note - use at least 100 so it will be possible to get a track that goes out of view)
        n_cases_per_scene = 1  # num cases to generate from each scene

    # --------------------------------------------------------------------------------------------------------------------
    rand_seed = 0  # random seed for reproducibility

    # path to the raw data generate by the unity simulator:
    load_path = Path(args.load_path)

    # path to save the processed scenes dataset:
    save_path = Path(args.save_path)

    # in sanity check mode we generate easy cases for sanity check (the target may always be visible)
    min_non_visible_frames = 0 if args.easy_cases_mode else 20

    # --------------------------------------------------------------------------------------------------------------------

    with Tee(save_path / "log.txt"):  # save the prints to a file
        for split_name in ["Train", "Test"]:
            # Importing a raw dataset of scenes from the unity simulator:
            SimImporter(
                load_path=load_path,
                split_name=split_name,
                save_path=save_path,
                limit_n_scenes=limit_n_scenes,
                limit_n_frames=limit_n_frames,
                save_overwrite=save_overwrite,
                sim_name="ColonNav",
            ).run()

            # --------------------------------------------------------------------------------------------------------------------

            # Generate several cases from each scene, each with randomly chosen target location and size.
            TargetCasesCreator(
                sim_data_path=save_path / split_name,
                n_cases_per_scene=n_cases_per_scene,
                min_non_visible_frames=min_non_visible_frames,
                rand_seed=rand_seed,
                save_overwrite=save_overwrite,
            ).run()


# --------------------------------------------------------------------------------------------------------------------

if __name__ == "__main__":
    main()

# --------------------------------------------------------------------------------------------------------------------
